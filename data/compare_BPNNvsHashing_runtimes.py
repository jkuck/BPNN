import os
from decimal import Decimal
import matplotlib.pyplot as plt
import matplotlib
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
from collections import defaultdict
import operator
import random
from scipy.stats import gmean
from wandbCSV_to_latexTable import get_approxMC_estAndTime, get_F2_estAndTime, get_exact_ln_modelCount, get_exact_ln_modelCount
import json
from SAT_train_test_split import ALL_TRAIN_PROBLEMS

def make_SAT_estimate_figure(runtimes_dir='/atlas/u/jkuck/learn_BP/data/SAT_BPNN_runtimes/', problem_category='or_50_problems'):
    '''
    should be able to load dictionary of all training problem results for BPNN, from running learn_BP_SAT.py in testing mode
    results = {'squared_errors': squared_errors, 'runtimes': runtimes, 
               'BPNN_estimated_ln_counts': BPNN_estimated_counts, 
               'exact_ln_solution_counts': exact_solution_counts,
               'problem_names': problem_names}    
    '''
    
    # with open(runtimes_dir + "trainSet_runtimesAndErrors_3layer.json", 'r') as json_file:
    with open(runtimes_dir + "group2_trainSet_runtimesAndErrors_5layer.json", 'r') as json_file:
        results = json.load(json_file)

    print('sanity check, BPNN RMSE =', np.sqrt(np.mean(results['squared_errors'])))
        
    assert(len(results['runtimes']) == len(results['problem_names']))
    approxMC_errors = []
    exact_counts_approxMC = []
    
    F2_errors = []
    exact_counts_F2 = []
    
    BPNN_errors = []
    exact_counts_BPNN = []
    # print("results:")
    # print(results)
    BPNN_estimates_with_ln = []
    ApproxMC_estimates_with_ln = []
    F2_estimates_with_ln = []
    for idx, BPNN_est in enumerate(results['BPNN_estimated_ln_counts']):
        problem_name = results['problem_names'][idx]
        # if not (problem_name in [problem['problem'] for problem in  ALL_TRAIN_PROBLEMS[problem_category]]):
        #     continue
        # if results['exact_ln_solution_counts'][idx] > 100:
        #     continue

        BPNN_errors.append(BPNN_est - results['exact_ln_solution_counts'][idx])
        BPNN_estimates_with_ln.append(BPNN_est)
        exact_counts_BPNN.append(results['exact_ln_solution_counts'][idx])
        
        approxMC_lnZ_est, approxMC_time = get_approxMC_estAndTime(problem_name)
        if approxMC_lnZ_est is not None:
            approxMC_errors.append(approxMC_lnZ_est - results['exact_ln_solution_counts'][idx])
            ApproxMC_estimates_with_ln.append(approxMC_lnZ_est)
            exact_counts_approxMC.append(results['exact_ln_solution_counts'][idx])
        F2_lnZ_est, F2_varDeg3_time = get_F2_estAndTime(problem_name)
        if F2_lnZ_est is not None:
            F2_errors.append(F2_lnZ_est - results['exact_ln_solution_counts'][idx])        
            exact_counts_F2.append(results['exact_ln_solution_counts'][idx])
            F2_estimates_with_ln.append(F2_lnZ_est)
#     plt.plot(x_vals, perfect, '-', label='Zero Error')

    print("len(BPNN_errors):", len(BPNN_errors))
    print("len(exact_counts_approxMC):", len(exact_counts_approxMC))
    print("len(exact_counts_F2):", len(exact_counts_F2))

    
    plt.plot(exact_counts_BPNN, BPNN_errors, 'x', color='blue', alpha=0.3, markersize=3, label='BPNN')
    plt.plot(exact_counts_approxMC, approxMC_errors, '+', color='tab:orange', alpha=0.3, markersize=3, label='ApproxMC3')
    plt.plot(exact_counts_F2, F2_errors, '1', color='green', alpha=0.3, markersize=3, label='F2')


    # plt.xlabel('(f_max, c_max)', fontsize=14)
#     plt.xlabel(r'$\ln(\textrm{Exact Model Count})$', fontsize=14)
    plt.xlabel("ln(Exact Model Count)", fontsize=14)

    # plt.xlabel('\\textit{Velocity (\N{DEGREE SIGN}/sec)}', fontsize=14)

#     plt.ylabel(r'$\ln(\textrm{Estimate}) - \ln(\textrm{Exact Model Count})$', fontsize=15)
    plt.ylabel("ln(Estimate) - ln(Exact Model Count)", fontsize=14)

               
    plt.yscale('symlog')
    plt.xscale('log')


    plt.title('Exact vs. Estimated Model Counts', fontsize=20)
    # plt.legend(fontsize=12)    
    lgd = plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.13),
            fancybox=True, ncol=3, fontsize=12, prop={'size': 11})
    #make the font bigger
    matplotlib.rcParams.update({'font.size': 10})        

    plt.grid(True)

#     plt.xticks(np.arange(9), ['(.1, 5)', '(.1, 10)', '(.1, 50)', '(.2, 5)', '(.2, 10)', '(.2, 50)', '(1, 5)', '(1, 1)', '(1, 50)'])
    # plot_name = 'quick_plot.png'
    # plt.savefig(ROOT_DIR + 'sat_plots/' + plot_name) 
    plt.savefig('./exactVsEstModelCounts.png', bbox_extra_artists=(lgd,), bbox_inches='tight', format='png')   
    # plt.show()    

    print(np.min(exact_counts_BPNN))
    print(np.max(exact_counts_BPNN))
    print(np.min(BPNN_estimates_with_ln))
    print(np.max(BPNN_estimates_with_ln))






    print('BPNN corellation coefficient:', np.corrcoef(exact_counts_BPNN, BPNN_estimates_with_ln))
    print('ApproxMC corellation coefficient:', np.corrcoef(exact_counts_approxMC, ApproxMC_estimates_with_ln))
    print('F2 corellation coefficient:', np.corrcoef(exact_counts_F2, F2_estimates_with_ln))
    


def get_BPNN_runtime_ratios(runtimes_dir='/atlas/u/jkuck/learn_BP/data/SAT_BPNN_runtimes/'):
    '''
    should be able to load dictionary of all training problem results for BPNN, from running learn_BP_SAT.py in testing mode
    results = {'squared_errors': squared_errors, 'runtimes': runtimes, 
               'BPNN_estimated_ln_counts': BPNN_estimated_counts, 
               'exact_ln_solution_counts': exact_solution_counts,
               'problem_names': problem_names}    
    '''
    # with open(runtimes_dir + "trainSet_runtimesAndErrors_2layer.json", 'r') as json_file:
    # with open(runtimes_dir + "or50_trainSet_runtimesAndErrors_5layer.json", 'r') as json_file:
    with open(runtimes_dir + "group2_trainSet_runtimesAndErrors_5layer.json", 'r') as json_file:
        results = json.load(json_file)

    print('sanity check, BPNN RMSE =', np.sqrt(np.mean(results['squared_errors'])))
        
    assert(len(results['runtimes']) == len(results['problem_names']))
    approxMC_over_BPNN_runtime_ratios = []
    F2_over_BPNN_runtime_ratios = []
    approxMC_over_F2_runtime_ratios = []
    
    BPNN_runtimes = []
    approxMC_runtimes = []
    F2_runtimes = []

    BPNN_errors = []
    max_ratio=1
    for idx, problem_name in enumerate(results['problem_names']):
        BPNN_runtime = results['runtimes'][idx]
        BPNN_runtimes.append(BPNN_runtime)

        approxMC_lnZ_est, approxMC_time = get_approxMC_estAndTime(problem_name)
        if approxMC_time is not None:
            if approxMC_time < 10:
                print("approxMC_time:", approxMC_time, "problem_name:", problem_name)
            approxMC_time = max(approxMC_time, .01) #I believe some ApproxMC times are incorrectly recorded as 0
            approxMC_runtimes.append(approxMC_time) #I believe some ApproxMC/F2 times are incorrectly recorded as 0
            if approxMC_time/BPNN_runtime > max_ratio:
                max_ratio = approxMC_time/BPNN_runtime
                print('new max_ratio=', max_ratio, "approxMC_time=", approxMC_time, "BPNN_runtime=", BPNN_runtime)
            approxMC_over_BPNN_runtime_ratios.append(approxMC_time/BPNN_runtime)
        else:
            pass
            # approxMC_runtimes.append(5000) #represent timeout

        F2_lnZ_est, F2_varDeg3_time = get_F2_estAndTime(problem_name)
        if F2_varDeg3_time is not None:
            # F2_varDeg3_time = max(F2_varDeg3_time, .01) #I believe some ApproxMC times are incorrectly recorded as 0            
            F2_over_BPNN_runtime_ratios.append(F2_varDeg3_time/BPNN_runtime)        
            F2_runtimes.append(F2_varDeg3_time) #I believe some ApproxMC/F2 times are incorrectly recorded as 0
        else:
            pass
            # F2_runtimes.append(5000) #represent timeout
        if (F2_varDeg3_time is not None) and (approxMC_time is not None):
            approxMC_over_F2_runtime_ratios.append(approxMC_time/F2_varDeg3_time)        




    print("total problem count =", len(results['problem_names']))
    print("fraction of problems completed by approxMC =", len(approxMC_over_BPNN_runtime_ratios)/len(results['problem_names']))
    print("problem count completed by approxMC =", len(approxMC_over_BPNN_runtime_ratios))
    print("fraction of problems completed by F2 =", len(F2_over_BPNN_runtime_ratios)/len(results['problem_names']))
    print()

    # bins = np.linspace(0, 6000, 100)


    #for or_50, this model https://app.wandb.ai/jdkuck/learn_BP_sat_MLP34_CompareDoubleCount_andBethe/runs/szfxspl1?workspace=user-jdkuck
    BPNN_runtimes_seq_gpu = [0.060622215270996094, 0.060539960861206055, 0.060422658920288086, 0.05814838409423828, 0.05730605125427246, 0.059450626373291016, 0.0597033500673867, 0.05996990203857422, 0.06163763999938965, 0.058892250061035156, 0.06026339530944824, 0.06047701835632324, 0.059780120849609375, 0.057590484619140625, 0.05834650993347168, 0.05983996391296387, 0.06048274040222168, 0.05918431282043457, 0.05893731117248535, 0.05782723426818848, 0.06079387664794922, 0.06841516494750977, 0.059058189392089844, 0.057517290115356445, 0.057523488998413086, 0.06108689308166504, 0.06038212776184082, 0.05892515182495117, 0.05756950378417969, 0.0595550537109375, 0.06154036521911621, 0.059813737869262695, 0.060307979583740234, 0.05775809288024902, 0.058362722396850586, 0.06273961067199707, 0.05844473838806152, 0.0576326847076416, 0.06247711181640625, 0.05849575996398926, 0.06070280075073242, 0.058536529541015625, 0.058138370513916016, 0.06125783920288086, 0.05908656120300293, 0.059549570083618164, 0.059453487396240234, 0.05890989303588867, 0.0604095458984375, 0.06146955490112305, 0.05936861038208008, 0.06851601600646973, 0.059723854064941406, 0.05856633186340332, 0.06199145317077637, 0.05920743942260742, 0.058744192123413086, 0.05825495719909668, 0.05923819541931152, 0.060155630111694336, 0.060860633850097656, 0.05896353721618652, 0.058365821838378906, 0.06010627746582031, 0.06031608581542969, 0.06064271926879883, 0.05863761901855469, 0.05854511260986328, 0.06004834175109863, 0.06404232978820801, 0.06216001510620117, 0.058770179748535156, 0.058008670806884766, 0.06010890007019043, 0.061095237731933594, 0.06026768684387207, 0.05809926986694336, 0.06148171424865723, 0.060827016830444336, 0.060285329818725586, 0.06374168395996094, 0.061304330825805664, 0.06731700897216797, 0.06122541427612305, 0.0596919059753418, 0.060633182525634766, 0.05931258201599121, 0.06046700477600098, 0.06057119369506836, 0.05922651290893555, 0.0596463680267334, 0.05864453315734863, 0.06057572364807129, 0.05861973762512207, 0.05899357795715332, 0.060057878494262695, 0.058429718017578125, 0.060938119888305664, 0.05978274345397949, 0.05924057960510254, 0.06050682067871094, 0.05862569808959961, 0.05917477607727051, 0.05892324447631836, 0.0596163272857666]
    BPNN_runtimes_seq_cpu = [0.10863208770751953, 0.08238554000854492, 0.09173440933227539, 0.0853269100189209, 0.08945107460021973, 0.09090781211853027, 0.09998345375061035, 0.09675192832946777, 0.08996844291687012, 0.08359599113464355, 0.08504152297973633, 0.09459900856018066, 0.09918832778930664, 0.08538317680358887, 0.09831380844116211, 0.09071493148803711, 0.09154057502746582, 0.0883016586303711, 0.08319497108459473, 0.08014965057373047, 0.07815337181091309, 0.10342788696289062, 0.0851905345916748, 0.08782553672790527, 0.07578802108764648, 0.07806539535522461, 0.0774688720703125, 0.0783236026763916, 0.07511210441589355, 0.08007693290710449, 0.11082720756530762, 0.08535027503967285, 0.0774846076965332, 0.0760958194732666, 0.08675217628479004, 0.0793604850769043, 0.07645344734191895, 0.07773232460021973, 0.09214377403259277, 0.08632969856262207, 0.0864725112915039, 0.08308815956115723, 0.07702803611755371, 0.09874510765075684, 0.07765340805053711, 0.08294534683227539, 0.08363842964172363, 0.07770514488220215, 0.07666540145874023, 0.07872462272644043, 0.07764172554016113, 0.0809934139251709, 0.0753176212310791, 0.07770633697509766, 0.0775141716003418, 0.08794689178466797, 0.07906389236450195, 0.07759380340576172, 0.07718896865844727, 0.07984185218811035, 0.0792841911315918, 0.07827448844909668, 0.07629871368408203, 0.07602643966674805, 0.08040928840637207, 0.07563924789428711, 0.07411479949951172, 0.10200667381286621, 0.0789496898651123, 0.07280421257019043, 0.09984064102172852, 0.08788609504699707, 0.0825803279876709, 0.07758307456970215, 0.08542346954345703, 0.07487273216247559, 0.07709240913391113, 0.0747215747833252, 0.08442449569702148, 0.07541346549987793, 0.07544732093811035, 0.07341313362121582, 0.07744002342224121, 0.07303905487060547, 0.0758812427520752, 0.0822751522064209, 0.08058404922485352, 0.07228231430053711, 0.07515335083007812, 0.07942485809326172, 0.09194588661193848, 0.07770371437072754, 0.07254290580749512, 0.08791661262512207, 0.07408833503723145, 0.07698822021484375, 0.07510852813720703, 0.08027982711791992, 0.07554292678833008, 0.08650732040405273, 0.07317972183227539, 0.08393049240112305, 0.0718679428100586, 0.07615876197814941, 0.07975363731384277]

    #for group2
    BPNN_runtimes_seq_gpu = [0.3599405288696289, 0.09451556205749512, 0.0911412239074707, 0.09006714820861816, 0.09013152122497559, 0.08862662315368652, 0.09048795700073242, 0.09131169319152832, 0.09125351905822754, 0.09078669548034668, 0.09210348129272461, 0.09061431884765625, 0.091033935546875, 0.09043526649475098, 0.09215712547302246, 0.09055590629577637, 0.09078025817871094, 0.09905099868774414, 0.09093141555786133, 0.0908503532409668, 0.08820581436157227, 0.08952069282531738, 0.09127044677734375, 0.0910940170288086, 0.0914301872253418, 0.09167695045471191, 0.09095907211303711, 0.09074926376342773, 0.09068489074707031, 0.0910334587097168, 0.09227299690246582, 0.09105348587036133, 0.09124064445495605, 0.09144711494445801, 0.09086918830871582, 0.08871603012084961, 0.08917593955993652, 0.10056519508361816, 0.09200072288513184, 0.09129619598388672, 0.09120774269104004, 0.09122467041015625, 0.09124374389648438, 0.09096765518188477, 0.0913853645324707, 0.09130096435546875, 0.09127521514892578, 0.0912160873413086, 0.09135079383850098, 0.09140849113464355, 0.09080743789672852, 0.0899362564086914, 0.09193015098571777, 0.09174513816833496, 0.09138011932373047, 0.09154319763183594, 0.0914146900177002, 0.10019707679748535, 0.09065508842468262, 0.09142303466796875, 0.0912027359008789, 0.09139037132263184, 0.0919959545135498, 0.09227275848388672, 0.09221601486206055, 0.09135317802429199, 0.08852434158325195, 0.0905146598815918, 0.09174776077270508, 0.09188628196716309, 0.09301304817199707, 0.09159708023071289, 0.09174251556396484, 0.09072709083557129, 0.09241628646850586, 0.09143853187561035, 0.09138870239257812, 0.09152650833129883, 0.09830117225646973, 0.09158706665039062, 0.09172916412353516, 0.08875799179077148, 0.09136581420898438, 0.0919489860534668, 0.09230756759643555, 0.09129095077514648, 0.09166860580444336, 0.09152698516845703, 0.09084606170654297, 0.09232664108276367, 0.0929257869720459, 0.09142565727233887, 0.09163784980773926, 0.09148788452148438, 0.09221482276916504, 0.09197831153869629, 0.09083938598632812, 0.08972620964050293, 0.10039091110229492, 0.10457968711853027, 0.09214949607849121, 0.09206962585449219, 0.0918266773223877, 0.09171390533447266, 0.09288573265075684, 0.09560608863830566, 0.09155416488647461, 0.09145426750183105, 0.09147858619689941, 0.0939016342163086, 0.09687542915344238, 0.09177160263061523, 0.08915305137634277, 0.09127497673034668, 0.09302091598510742, 0.09252500534057617, 0.09171724319458008, 0.09677577018737793, 0.09242677688598633, 0.09150934219360352, 0.09158205986022949, 0.09218072891235352, 0.09183359146118164, 0.09186792373657227, 0.09310030937194824, 0.09171199798583984, 0.09180307388305664, 0.08983039855957031, 0.08948850631713867, 0.09174585342407227, 0.09382820129394531, 0.09188318252563477, 0.0918281078338623, 0.09205842018127441, 0.0928194522857666, 0.09183764457702637, 0.0915975570678711, 0.09336638450622559, 0.09483075141906738, 0.09168887138366699, 0.09163188934326172, 0.09224605560302734, 0.09169554710388184, 0.09018492698669434, 0.09010910987854004, 0.09193682670593262, 0.09285116195678711, 0.09201860427856445, 0.0921783447265625, 0.0915992259979248, 0.09252238273620605, 0.09222698211669922, 0.09184551239013672, 0.0927269458770752, 0.09186220169067383, 0.09179329872131348, 0.09174251556396484, 0.09386754035949707, 0.09406328201293945, 0.08887553215026855, 0.09000182151794434, 0.09237551689147949, 0.09244132041931152, 0.09284615516662598, 0.09267377853393555, 0.09340500831604004, 0.09217238426208496, 0.09211134910583496, 0.09165430068969727, 0.09151124954223633, 0.09184050559997559, 0.09195303916931152, 0.0918118953704834, 0.0926201343536377, 0.09138727188110352, 0.0898897647857666, 0.0914304256439209, 0.09377241134643555, 0.09394335746765137, 0.0915684700012207, 0.09167885780334473, 0.09190845489501953, 0.09199714660644531, 0.0932469367980957, 0.09207439422607422, 0.11014175415039062, 0.09364795684814453, 0.09161925315856934, 0.09189653396606445, 0.09250712394714355, 0.09210968017578125, 0.09301257133483887, 0.0928044319152832, 0.09299540519714355, 0.09197330474853516, 0.09166526794433594, 0.0919497013092041, 0.1012425422668457, 0.09190869331359863, 0.09187984466552734, 0.09211134910583496, 0.09201288223266602, 0.09290194511413574, 0.09258103370666504, 0.09093737602233887, 0.0899956226348877, 0.09216570854187012, 0.09248971939086914, 0.09174418449401855, 0.0918264389038086, 0.09256434440612793, 0.09206652641296387, 0.09290552139282227, 0.09202980995178223, 0.09196805953979492, 0.09188556671142578, 0.09192156791687012, 0.1009664535522461, 0.09189271926879883, 0.09068179130554199, 0.09062910079956055, 0.0921471118927002, 0.09312939643859863, 0.09289860725402832, 0.09158134460449219, 0.09247255325317383, 0.091949462890625, 0.09229421615600586, 0.0942835807800293, 0.09281730651855469, 0.09208250045776367, 0.0917201042175293, 0.09308815002441406, 0.09179973602294922, 0.09081530570983887, 0.09011125564575195, 0.09186172485351562, 0.10972952842712402, 0.09197044372558594, 0.09163212776184082, 0.09236431121826172, 0.09232306480407715, 0.0934293270111084, 0.0921945571899414, 0.09218859672546387, 0.09244132041931152, 0.09181046485900879, 0.09178495407104492, 0.09217715263366699, 0.09213781356811523, 0.09063482284545898, 0.09187483787536621, 0.0934607982635498, 0.09222006797790527, 0.09238815307617188, 0.09200477600097656, 0.09186458587646484, 0.10306978225708008, 0.09369945526123047, 0.09283018112182617, 0.09160399436950684, 0.09259819984436035, 0.09188318252563477, 0.09174680709838867, 0.09102821350097656, 0.09008431434631348, 0.09221100807189941, 0.09313225746154785, 0.09552788734436035, 0.09549999237060547, 0.09439849853515625, 0.09451794624328613, 0.09412932395935059, 0.09377169609069824, 0.09386420249938965, 0.09358668327331543, 0.09353160858154297, 0.10202765464782715, 0.09390068054199219, 0.09132504463195801, 0.0924985408782959, 0.09487366676330566, 0.09423685073852539, 0.0944066047668457, 0.09374618530273438, 0.09356212615966797, 0.09356403350830078, 0.09360599517822266, 0.09404635429382324, 0.09380125999450684, 0.09522008895874023, 0.09368467330932617, 0.09394073486328125, 0.0938103199005127, 0.09091067314147949, 0.09278059005737305, 0.10361647605895996, 0.09441852569580078, 0.09367895126342773, 0.09362363815307617, 0.0948784351348877, 0.09356212615966797, 0.09350132942199707, 0.09419918060302734, 0.09389758110046387, 0.09359908103942871, 0.09472846984863281, 0.09475517272949219, 0.09237003326416016, 0.09361028671264648, 0.09397745132446289, 0.09416747093200684, 0.09411239624023438, 0.09370183944702148, 0.09356260299682617, 0.09628176689147949, 0.0943596363067627, 0.09376096725463867, 0.0936894416809082, 0.09442305564880371, 0.09356570243835449, 0.09383368492126465, 0.0945732593536377, 0.0911264419555664, 0.09285521507263184, 0.09367918968200684, 0.09358501434326172, 0.09373068809509277, 0.0946664810180664, 0.09445071220397949, 0.09372305870056152, 0.09382915496826172, 0.09374761581420898, 0.09438061714172363, 0.09366035461425781, 0.10213804244995117, 0.09455275535583496, 0.10595226287841797, 0.09285569190979004, 0.09121298789978027, 0.09331560134887695, 0.09527945518493652, 0.0941777229309082, 0.09332156181335449, 0.0945899486541748, 0.09335446357727051, 0.09361743927001953, 0.09412431716918945, 0.09433746337890625, 0.09338688850402832, 0.09342479705810547, 0.09354877471923828, 0.09365057945251465, 0.0934605598449707, 0.10002374649047852, 0.09475135803222656, 0.09378290176391602, 0.09430527687072754, 0.09343123435974121, 0.09345555305480957, 0.0949397087097168, 0.09370851516723633, 0.09342551231384277, 0.0935826301574707, 0.09361076354980469, 0.09148836135864258, 0.09165239334106445, 0.09261226654052734, 0.09143972396850586, 0.0898752212524414, 0.09146642684936523, 0.09171772003173828, 0.09138369560241699, 0.09203338623046875, 0.10057520866394043, 0.09184980392456055, 0.09307503700256348, 0.09202003479003906, 0.09171223640441895, 0.09182953834533691, 0.09121584892272949, 0.0921790599822998, 0.09082293510437012, 0.09302377700805664, 0.08991098403930664, 0.09374451637268066, 0.09380745887756348, 0.09560537338256836, 0.09420657157897949, 0.09348773956298828, 0.09391593933105469, 0.10364270210266113, 0.09373950958251953, 0.09339022636413574, 0.09477925300598145, 0.09258723258972168, 0.09501290321350098, 0.09567379951477051, 0.09148383140563965, 0.09384655952453613, 0.09465861320495605, 0.09442710876464844, 0.09856462478637695, 0.09728074073791504, 0.09836459159851074, 0.09492802619934082, 0.09673571586608887, 0.09424829483032227, 0.09689021110534668, 0.09430360794067383, 0.09406352043151855, 0.09523510932922363, 0.1024930477142334, 0.09319067001342773, 0.09515881538391113, 0.09482192993164062, 0.0942697525024414, 0.09474468231201172, 0.09501338005065918, 0.09579586982727051, 0.09974217414855957, 0.09465503692626953, 0.09431910514831543, 0.09532475471496582, 0.09579968452453613, 0.0949864387512207, 0.09455537796020508, 0.09493160247802734, 0.1005241870880127, 0.10142970085144043, 0.09994769096374512, 0.10710763931274414, 0.10025286674499512, 0.09427714347839355, 0.09827733039855957, 0.09507322311401367, 0.1041867733001709, 0.0975959300994873, 0.09345507621765137, 0.09395599365234375, 0.09590816497802734, 0.0972437858581543, 0.09803652763366699, 0.09890985488891602, 0.10457968711853027, 0.09923839569091797, 0.09656071662902832, 0.09659886360168457, 0.10473394393920898, 0.10863637924194336, 0.10547232627868652, 0.11131930351257324, 0.09898209571838379, 0.10436534881591797, 0.1065070629119873, 0.09733414649963379, 0.09396839141845703, 0.0945587158203125, 0.1031489372253418, 0.1023249626159668, 0.10209321975708008, 0.10197734832763672, 0.10216712951660156, 0.12322068214416504, 0.10633659362792969, 0.1092832088470459, 0.11031579971313477, 0.11935949325561523, 0.09478068351745605, 0.09415912628173828, 0.09471631050109863, 0.09386539459228516, 0.09416961669921875, 0.09450078010559082, 0.09560132026672363, 0.09607315063476562, 0.09439229965209961, 0.09433841705322266, 0.09531450271606445, 0.09567523002624512, 0.09476566314697266, 0.09505009651184082, 0.09465265274047852, 0.10383749008178711, 0.09613442420959473, 0.09434771537780762, 0.09420013427734375, 0.09562134742736816, 0.09438276290893555, 0.09573793411254883, 0.09758639335632324, 0.09801363945007324, 0.09428906440734863, 0.09520220756530762, 0.09676051139831543, 0.09453272819519043, 0.09660649299621582, 0.09801054000854492, 0.09882259368896484, 0.09668684005737305, 0.09690093994140625, 0.09754562377929688, 0.1065831184387207, 0.09692931175231934, 0.09833931922912598, 0.09983468055725098, 0.09567999839782715, 0.10330700874328613, 0.09734177589416504, 0.09539484977722168, 0.10739707946777344, 0.10108351707458496, 0.09844756126403809, 0.10318517684936523, 0.10144639015197754, 0.10883331298828125, 0.09782242774963379, 0.0983271598815918, 0.10074901580810547, 0.1165010929107666, 0.10321044921875, 0.10284018516540527, 0.0974740982055664, 0.10049223899841309, 0.10603785514831543, 0.09854912757873535, 0.09935212135314941, 0.10481905937194824, 0.10105133056640625, 0.10329127311706543, 0.09950017929077148, 0.10478901863098145, 0.11066317558288574, 0.10852456092834473, 0.0991830825805664, 0.09729886054992676, 0.10707592964172363, 0.10886573791503906, 0.1083066463470459, 0.10335350036621094, 0.10636639595031738, 0.10310244560241699, 0.10309505462646484, 0.10335659980773926, 0.09922075271606445, 0.10624194145202637, 0.10006165504455566, 0.09940314292907715, 0.10776758193969727, 0.10874152183532715, 0.10806846618652344, 0.09921836853027344, 0.11966347694396973, 0.10169243812561035, 0.10317111015319824, 0.11045980453491211, 0.11049866676330566]
    BPNN_runtimes_seq_cpu = [1.1792495250701904, 0.15300655364990234, 0.12038540840148926, 0.12039566040039062, 0.12006855010986328, 0.13918709754943848, 0.12180781364440918, 0.11887121200561523, 0.12027478218078613, 0.11538195610046387, 0.1162104606628418, 0.12883520126342773, 0.12380146980285645, 0.12358427047729492, 0.11992192268371582, 0.11904573440551758, 0.12097859382629395, 0.11866903305053711, 0.12026023864746094, 0.12175488471984863, 0.11888313293457031, 0.13338947296142578, 0.11976003646850586, 0.1204061508178711, 0.1191864013671875, 0.12065291404724121, 0.1195380687713623, 0.12033367156982422, 0.11958146095275879, 0.12265324592590332, 0.12865543365478516, 0.14680194854736328, 0.14506101608276367, 0.13611340522766113, 0.14798927307128906, 0.1686396598815918, 0.1455991268157959, 0.14636468887329102, 0.12040352821350098, 0.12211489677429199, 0.11937522888183594, 0.12172698974609375, 0.11735987663269043, 0.11967110633850098, 0.11200714111328125, 0.1167612075805664, 0.11814045906066895, 0.11912727355957031, 0.11818337440490723, 0.11981725692749023, 0.11716151237487793, 0.1396791934967041, 0.11958479881286621, 0.12106490135192871, 0.1208953857421875, 0.11643576622009277, 0.11997389793395996, 0.12134957313537598, 0.11840200424194336, 0.11853814125061035, 0.11727786064147949, 0.1182713508605957, 0.11863446235656738, 0.11763811111450195, 0.12203598022460938, 0.11981034278869629, 0.13740229606628418, 0.11880230903625488, 0.11955952644348145, 0.1251513957977295, 0.11988306045532227, 0.11970996856689453, 0.11929154396057129, 0.1197519302368164, 0.1172020435333252, 0.11504578590393066, 0.12891006469726562, 0.11489510536193848, 0.11572051048278809, 0.11490345001220703, 0.11253142356872559, 0.11588764190673828, 0.13440394401550293, 0.11659693717956543, 0.11467194557189941, 0.11590695381164551, 0.11515402793884277, 0.11773109436035156, 0.11730051040649414, 0.11439990997314453, 0.11555671691894531, 0.11337852478027344, 0.10972714424133301, 0.11512947082519531, 0.11629009246826172, 0.11700582504272461, 0.11766505241394043, 0.11684107780456543, 0.13643527030944824, 0.11951851844787598, 0.11584687232971191, 0.11930346488952637, 0.12047266960144043, 0.12293004989624023, 0.11690163612365723, 0.13213562965393066, 0.1328117847442627, 0.13219714164733887, 0.12820863723754883, 0.1320044994354248, 0.13345050811767578, 0.12986207008361816, 0.1287682056427002, 0.1453874111175537, 0.12853503227233887, 0.12274909019470215, 0.1270277500152588, 0.13066363334655762, 0.12902212142944336, 0.1281757354736328, 0.128523588180542, 0.12983226776123047, 0.12808537483215332, 0.12725329399108887, 0.1263260841369629, 0.12828707695007324, 0.12378215789794922, 0.12500500679016113, 0.14680719375610352, 0.12922191619873047, 0.1282660961151123, 0.12787103652954102, 0.13062667846679688, 0.12774205207824707, 0.12849783897399902, 0.12819218635559082, 0.12703657150268555, 0.1308596134185791, 0.12993264198303223, 0.1327366828918457, 0.1296684741973877, 0.12935686111450195, 0.15082097053527832, 0.13068556785583496, 0.12619590759277344, 0.12970757484436035, 0.13152837753295898, 0.13181853294372559, 0.12017154693603516, 0.1232149600982666, 0.12545990943908691, 0.12884283065795898, 0.12606048583984375, 0.12670040130615234, 0.12697339057922363, 0.12423968315124512, 0.12983965873718262, 0.14528369903564453, 0.1591193675994873, 0.12127256393432617, 0.12013649940490723, 0.12742853164672852, 0.12451171875, 0.12575912475585938, 0.12452864646911621, 0.12575244903564453, 0.12915325164794922, 0.12419843673706055, 0.12453413009643555, 0.12461090087890625, 0.12128663063049316, 0.11889386177062988, 0.16649746894836426, 0.15005183219909668, 0.15180373191833496, 0.15151572227478027, 0.1485588550567627, 0.13828635215759277, 0.12160348892211914, 0.12395286560058594, 0.12279510498046875, 0.12174201011657715, 0.12341785430908203, 0.11614465713500977, 0.11915063858032227, 0.12427902221679688, 0.12395167350769043, 0.1512439250946045, 0.12492775917053223, 0.12435150146484375, 0.13746237754821777, 0.13707447052001953, 0.1427443027496338, 0.1354365348815918, 0.13618707656860352, 0.13850808143615723, 0.138824462890625, 0.13777661323547363, 0.1356189250946045, 0.1382443904876709, 0.13603854179382324, 0.15533733367919922, 0.1390247344970703, 0.1390974521636963, 0.1289844512939453, 0.1347036361694336, 0.1419844627380371, 0.13750672340393066, 0.13811850547790527, 0.13634824752807617, 0.13861632347106934, 0.13529634475708008, 0.13708090782165527, 0.1381397247314453, 0.13490867614746094, 0.14064669609069824, 0.13422465324401855, 0.13660788536071777, 0.13754606246948242, 0.13471341133117676, 0.16687536239624023, 0.13654208183288574, 0.13451075553894043, 0.13698172569274902, 0.13724875450134277, 0.13408565521240234, 0.12747740745544434, 0.13460016250610352, 0.16065478324890137, 0.13503170013427734, 0.13523316383361816, 0.13373637199401855, 0.13320207595825195, 0.13384580612182617, 0.13544607162475586, 0.13731598854064941, 0.13724684715270996, 0.1342916488647461, 0.13039350509643555, 0.13645696640014648, 0.13256049156188965, 0.1355280876159668, 0.15322327613830566, 0.13330674171447754, 0.1319446563720703, 0.13118481636047363, 0.13301682472229004, 0.1334705352783203, 0.12772774696350098, 0.1270904541015625, 0.13051438331604004, 0.1329638957977295, 0.1304779052734375, 0.13058996200561523, 0.13350558280944824, 0.1343088150024414, 0.13064336776733398, 0.1502985954284668, 0.13350248336791992, 0.12893390655517578, 0.12621545791625977, 0.12873125076293945, 0.13201498985290527, 0.1314539909362793, 0.13164472579956055, 0.12801909446716309, 0.13047289848327637, 0.13069772720336914, 0.16524958610534668, 0.16559219360351562, 0.17804741859436035, 0.19093918800354004, 0.19848990440368652, 0.1713881492614746, 0.1622159481048584, 0.15975069999694824, 0.15950942039489746, 0.16818928718566895, 0.15833473205566406, 0.1533186435699463, 0.15973353385925293, 0.16393375396728516, 0.1802356243133545, 0.1650245189666748, 0.15839338302612305, 0.16151881217956543, 0.16295075416564941, 0.17052483558654785, 0.15394234657287598, 0.16346502304077148, 0.16038227081298828, 0.15899658203125, 0.15964317321777344, 0.1615278720855713, 0.15912508964538574, 0.1597919464111328, 0.15438246726989746, 0.15612506866455078, 0.1580674648284912, 0.1964869499206543, 0.18766450881958008, 0.196854829788208, 0.19778704643249512, 0.1873023509979248, 0.22068357467651367, 0.18150901794433594, 0.16919612884521484, 0.18508100509643555, 0.19230055809020996, 0.18446636199951172, 0.1943514347076416, 0.18800878524780273, 0.19020700454711914, 0.19195103645324707, 0.17514419555664062, 0.16144490242004395, 0.15695738792419434, 0.15950632095336914, 0.1576828956604004, 0.15730571746826172, 0.15479779243469238, 0.1632235050201416, 0.15648961067199707, 0.15303421020507812, 0.14960026741027832, 0.1602003574371338, 0.17299628257751465, 0.19658136367797852, 0.16022968292236328, 0.15819835662841797, 0.15793490409851074, 0.1627802848815918, 0.15321016311645508, 0.15164852142333984, 0.15511870384216309, 0.15459775924682617, 0.15630030632019043, 0.15602922439575195, 0.17116189002990723, 0.15374231338500977, 0.15625667572021484, 0.15149331092834473, 0.1528337001800537, 0.1509418487548828, 0.15409016609191895, 0.15554356575012207, 0.15412306785583496, 0.15237855911254883, 0.1528470516204834, 0.1549241542816162, 0.15170741081237793, 0.17221474647521973, 0.15089797973632812, 0.15842676162719727, 0.15102124214172363, 0.17001771926879883, 0.1666393280029297, 0.15504193305969238, 0.15195918083190918, 0.15276885032653809, 0.15172934532165527, 0.14581084251403809, 0.1476755142211914, 0.18956542015075684, 0.15174317359924316, 0.08498954772949219, 0.09144949913024902, 0.10189247131347656, 0.10881233215332031, 0.12282919883728027, 0.09509897232055664, 0.11018991470336914, 0.08694744110107422, 0.10318779945373535, 0.09779500961303711, 0.10739421844482422, 0.1222071647644043, 0.13492512702941895, 0.10489892959594727, 0.11631536483764648, 0.1073606014251709, 0.11556673049926758, 0.10989785194396973, 0.12241005897521973, 0.11526322364807129, 0.16573786735534668, 0.1269533634185791, 0.13561654090881348, 0.14362859725952148, 0.13888072967529297, 0.1572713851928711, 0.15659832954406738, 0.1399402618408203, 0.14223074913024902, 0.16471576690673828, 0.13001656532287598, 0.1416456699371338, 0.15880846977233887, 0.16327691078186035, 0.16024017333984375, 0.17430925369262695, 0.1613936424255371, 0.15520930290222168, 0.25661420822143555, 0.2707538604736328, 0.17605233192443848, 0.2839210033416748, 0.17278718948364258, 0.25606727600097656, 0.17975711822509766, 0.17785048484802246, 0.20275545120239258, 0.1829209327697754, 0.21012282371520996, 0.16048502922058105, 0.20927643775939941, 0.18919968605041504, 0.20456218719482422, 0.2055375576019287, 0.22575998306274414, 0.30760765075683594, 0.20166683197021484, 0.171980619430542, 0.21316027641296387, 0.24676823616027832, 0.1734461784362793, 0.20535039901733398, 0.27954769134521484, 0.3631322383880615, 0.3581082820892334, 0.3516230583190918, 0.3585774898529053, 0.34676074981689453, 0.18775463104248047, 0.3738393783569336, 0.23588943481445312, 0.48763275146484375, 0.29876041412353516, 0.17182278633117676, 0.1711869239807129, 0.28431129455566406, 0.2964441776275635, 0.3083972930908203, 0.33908700942993164, 0.4604496955871582, 0.33963441848754883, 0.24617767333984375, 0.2524142265319824, 0.4585990905761719, 0.5974116325378418, 0.5490787029266357, 0.5733945369720459, 0.32692790031433105, 0.5200631618499756, 0.5159368515014648, 0.14093756675720215, 0.15737557411193848, 0.16232872009277344, 0.39933323860168457, 0.42546582221984863, 0.4073505401611328, 0.41036415100097656, 0.40699219703674316, 0.9148104190826416, 0.4943249225616455, 0.3921165466308594, 0.6450567245483398, 0.7871494293212891, 0.17583847045898438, 0.17557597160339355, 0.17713284492492676, 0.17776060104370117, 0.17015862464904785, 0.17600560188293457, 0.23691654205322266, 0.21448898315429688, 0.1775064468383789, 0.17470932006835938, 0.21635770797729492, 0.2097303867340088, 0.26217198371887207, 0.22335386276245117, 0.17450475692749023, 0.1755051612854004, 0.2556748390197754, 0.1782853603363037, 0.1688237190246582, 0.2146611213684082, 0.1783733367919922, 0.21494102478027344, 0.22188043594360352, 0.31496310234069824, 0.17592144012451172, 0.2315981388092041, 0.3379089832305908, 0.312896728515625, 0.2995941638946533, 0.34122681617736816, 0.37741923332214355, 0.32556724548339844, 0.3127403259277344, 0.31711268424987793, 0.2782864570617676, 0.25420331954956055, 0.3353908061981201, 0.3922696113586426, 0.21750545501708984, 0.4194202423095703, 0.27802538871765137, 0.3227834701538086, 0.6460180282592773, 0.346343994140625, 0.29628634452819824, 0.41973042488098145, 0.3864774703979492, 0.5928595066070557, 0.2828218936920166, 0.3063027858734131, 0.3549792766571045, 0.30661702156066895, 0.41707658767700195, 0.4972052574157715, 0.3336660861968994, 0.3503448963165283, 0.4861023426055908, 0.30449485778808594, 0.35427045822143555, 0.44875216484069824, 0.3609943389892578, 0.42032432556152344, 0.35883474349975586, 0.47680091857910156, 0.720179557800293, 0.59922194480896, 0.4209911823272705, 0.25917911529541016, 0.35641002655029297, 0.564504861831665, 0.5349504947662354, 0.43754053115844727, 0.4797403812408447, 0.41788768768310547, 0.4459054470062256, 0.5190613269805908, 0.3529798984527588, 0.5487003326416016, 0.45505666732788086, 0.4301888942718506, 0.5157766342163086, 0.5241224765777588, 0.5204958915710449, 0.32718968391418457, 0.5814259052276611, 0.38084936141967773, 0.4132683277130127, 0.6009964942932129, 0.6418423652648926]
    ###### MAKE A HISTOGRAM ######
    bins = np.logspace(np.log10(.001),np.log10(6000), 25)
    plt.xscale('log')

    plt.hist(BPNN_runtimes, bins, alpha=0.5, label='BPNN-P')
    plt.hist(BPNN_runtimes_seq_cpu, bins, alpha=0.5, label='BPNN-S')
    plt.hist(F2_runtimes, bins, alpha=0.5, ls='dashed', lw=1, edgeColor = 'black', label='F2')
    plt.hist(approxMC_runtimes, bins, alpha=0.5, label='ApproxMC3')

    plt.title('Runtimes or_50 Benchmarks', fontsize=20)
    plt.xlabel("Runtime (Seconds)", fontsize=14)
    plt.ylabel("Benchmark Count", fontsize=14)

    lgd = plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.13),
            fancybox=True, ncol=4, fontsize=12, prop={'size': 11})

    matplotlib.rcParams.update({'font.size': 10})        

    #eps doesn't work with transparency
    plt.savefig('./runtime_histogram.png', bbox_extra_artists=(lgd,), bbox_inches='tight', format='png')   
    plt.clf()
    ###### MAKE A CACTUS PLOT ######
    bins = np.logspace(np.log10(.001),np.log10(6000), 25)
    plt.yscale('log')

    plt.scatter([i for i in range(len(BPNN_runtimes))], sorted(BPNN_runtimes), marker='x',linewidth=.75, color='blue', label='BPNN-P')
    plt.scatter([i for i in range(len(BPNN_runtimes_seq_cpu))], sorted(BPNN_runtimes_seq_cpu), marker='2',linewidth=.75, color='blue', label='BPNN-S')
    plt.scatter([i for i in range(len(approxMC_runtimes))], sorted(approxMC_runtimes), marker='+',linewidth=.75, color='tab:orange', label='ApproxMC3')
    plt.scatter([i for i in range(len(F2_runtimes))], sorted(F2_runtimes), marker='1',linewidth=.75, color='green', label='F2')

    # plt.title('Runtimes For Solved or_50 Benchmarks', fontsize=20)
    plt.title('Runtimes On OR_50 Benchmarks', fontsize=20)
    plt.xlabel("Benchmark", fontsize=14)
    plt.ylabel("Runtime (Seconds)", fontsize=14)

    lgd = plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.13),
            fancybox=True, ncol=4, fontsize=12, prop={'size': 11})

    matplotlib.rcParams.update({'font.size': 10})        

    plt.savefig('./runtime_cactus_plot.eps', bbox_extra_artists=(lgd,), bbox_inches='tight', format='eps')   
    plt.clf()

    #### Try 3d plot ####
    # get absolute errors
    assert(len(results['runtimes']) == len(results['problem_names']))
    approxMC_errors = []    
    F2_errors = []    
    BPNN_errors = []
    for idx, BPNN_est in enumerate(results['BPNN_estimated_ln_counts']):
        problem_name = results['problem_names'][idx]
        # if not (problem_name in [problem['problem'] for problem in  ALL_TRAIN_PROBLEMS[problem_category]]):
        #     continue
        BPNN_errors.append(np.abs(BPNN_est - results['exact_ln_solution_counts'][idx]))
        
        approxMC_lnZ_est, approxMC_time = get_approxMC_estAndTime(problem_name)
        if approxMC_lnZ_est is not None:
            approxMC_errors.append(np.abs(approxMC_lnZ_est - results['exact_ln_solution_counts'][idx]))
        F2_lnZ_est, F2_varDeg3_time = get_F2_estAndTime(problem_name)
        if F2_lnZ_est is not None:
            F2_errors.append(np.abs(F2_lnZ_est - results['exact_ln_solution_counts'][idx]))

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    # plt.title('Runtimes For Solved or_50 Benchmarks', fontsize=20)
    # ax.set_title('Runtimes And Estimates On OR_50 Benchmarks', fontsize=20)
    ax.set_xlabel("Benchmark", fontsize=14)
    ax.set_ylabel("Runtime (Seconds)", fontsize=14)
    ax.set_zlabel("Error", fontsize=14)

    # lgd = plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.13),
    #         fancybox=True, ncol=4, fontsize=12, prop={'size': 11})

    matplotlib.rcParams.update({'font.size': 10})        


    BPNN_runtimes_seq_cpu_sorted, BPNN_errors_sorted = zip(*sorted(zip(BPNN_runtimes_seq_cpu, BPNN_errors)))
    approxMC_runtimes_sorted, approxMC_errors_sorted = zip(*sorted(zip(approxMC_runtimes, approxMC_errors)))
    F2_runtimes_sorted, F2_errors_sorted = zip(*sorted(zip(F2_runtimes, F2_errors)))

    ax.scatter([i for i in range(len(BPNN_runtimes_seq_cpu))], BPNN_runtimes_seq_cpu_sorted, BPNN_errors_sorted)#, zdir='z', s=20, c=None, depthshade=True)#, *args, **kwargs)
    ax.scatter([i for i in range(len(approxMC_runtimes))], approxMC_runtimes_sorted, approxMC_errors_sorted)#, zdir='z', s=20, c=None, depthshade=True)#, *args, **kwargs)
    ax.scatter([i for i in range(len(F2_runtimes))], F2_runtimes_sorted, F2_errors_sorted)#, zdir='z', s=20, c=None, depthshade=True)#, *args, **kwargs)
    plt.savefig('./runtime_and_error_3d.png')#, bbox_extra_artists=(lgd,), bbox_inches='tight', format='png')   



    return approxMC_over_BPNN_runtime_ratios, F2_over_BPNN_runtime_ratios, approxMC_over_F2_runtime_ratios


def print_BPNN_runtime_ratio_stats():
    approxMC_over_BPNN_runtime_ratios, F2_over_BPNN_runtime_ratios, approxMC_over_F2_runtime_ratios = get_BPNN_runtime_ratios()
    print("np.min(approxMC_over_BPNN_runtime_ratios):", np.min(approxMC_over_BPNN_runtime_ratios))
    print("np.percentile(approxMC_over_BPNN_runtime_ratios, 10):", np.percentile(approxMC_over_BPNN_runtime_ratios, 10))        
    print("np.mean(approxMC_over_BPNN_runtime_ratios):", np.mean(approxMC_over_BPNN_runtime_ratios))
    print("np.median(approxMC_over_BPNN_runtime_ratios):", np.median(approxMC_over_BPNN_runtime_ratios))
    print("geometric mean(approxMC_over_BPNN_runtime_ratios):", gmean(approxMC_over_BPNN_runtime_ratios))
    print("np.max(approxMC_over_BPNN_runtime_ratios):", np.max(approxMC_over_BPNN_runtime_ratios))
    print()
    print("np.min(approxMC_over_F2_runtime_ratios):", np.min(approxMC_over_F2_runtime_ratios))
    print("np.percentile(approxMC_over_F2_runtime_ratios, 10):", np.percentile(approxMC_over_F2_runtime_ratios, 10))    
    print("np.mean(approxMC_over_F2_runtime_ratios):", np.mean(approxMC_over_F2_runtime_ratios))
    print("np.median(approxMC_over_F2_runtime_ratios):", np.median(approxMC_over_F2_runtime_ratios))
    print("geometric gmean(approxMC_over_F2_runtime_ratios):", gmean(approxMC_over_F2_runtime_ratios))
    print("np.max(approxMC_over_F2_runtime_ratios):", np.max(approxMC_over_F2_runtime_ratios))    
    print()
    print("np.min(F2_over_BPNN_runtime_ratios):", np.min(F2_over_BPNN_runtime_ratios))
    print("np.percentile(F2_over_BPNN_runtime_ratios, 10):", np.percentile(F2_over_BPNN_runtime_ratios, 10))    
    print("np.mean(F2_over_BPNN_runtime_ratios):", np.mean(F2_over_BPNN_runtime_ratios))
    print("np.median(F2_over_BPNN_runtime_ratios):", np.median(F2_over_BPNN_runtime_ratios))
    print("geometric mean (F2_over_BPNN_runtime_ratios):", gmean(F2_over_BPNN_runtime_ratios))
    print("np.max(F2_over_BPNN_runtime_ratios):", np.max(F2_over_BPNN_runtime_ratios))


if __name__ == "__main__":
    print_BPNN_runtime_ratio_stats()
    # make_SAT_estimate_figure()
